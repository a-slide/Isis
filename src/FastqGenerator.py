"""
@package FastqGenerator
@brief Assemble a SeqRecord object generated by SlicePicker and a quality string generated by
QualGenerator to form an enhanced SeqRecord object ready to be exported in fastq format
@copyright  [GNU General Public License v2](http://www.gnu.org/licenses/gpl-2.0.html)
@author     Adrien Leger - 2014
* <adrien.leger@gmail.com>
* <adrien.leger@inserm.fr>
* <adrien.leger@univ-nantes.fr>
* [Github](https://github.com/a-slide)
* [Atlantic Gene Therapies - INSERM 1089] (http://www.atlantic-gene-therapies.fr/)
"""

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
class FastqGenerator(object):
    """
    @class FastqGenerator
    @brief Base class for FastqGeneratorSingle and FastqGeneratorPair
    """
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

    #~~~~~~~FONDAMENTAL METHODS~~~~~~~#

    def __init__(self, slicer, qualgen):
        """
        Initiate object with references to instances of SlicePicker and QualGenerator
        @param slicer   Instance of SlicePicker(Pair or Single)
        @param qualgen  Instance of QualGenerator
        """
        # Store link to SlicePicker and QualGenerator object
        self.slicer = slicer
        self.qualgen = qualgen

    def __repr__(self):
        return "{}\n QualGenerator :\n{}\nSlicePicker :\n{}\n".format(
            self.__str__(),
            self.qualgen.repr(),
            self.slicer.repr())

    def __str__(self):
        return "<Instance of {} from {} >".format(self.__class__.__name__, self.__module__)

    #~~~~~~~ACCESS METHODS~~~~~~~#

    def get_slicer(self):
        return self.slicer

    def get_qualgen(self):
        return self.qualgen

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
class FastqGeneratorSingle(FastqGenerator):
    """
    @class FastqGeneratorSingle
    @brief Generate a single of SeqReccord object containing a quality string from a given
    Reference source thanks to instances of SlicePickerSingle and of Qualgenerator
    """
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

    #~~~~~~~PUBLIC METHODS~~~~~~~#

    def generate_fastq (self,source):
        """
        Ask a single read to source with slicer and add a quality string generated with qualgen
        @param source Instance of ReferenceGenome or ReferenceJunctions
        @return A SeqRecord objects including a quality string in the "letter_annotations"
        dictionnary
        """
        # Ask a seqReccord slice to a reference sequence source
        try:
            read = self.slicer.pick_slice(source)
        except Exception as e:
            print e
            exit (0)

        # Add a phred quality string the seqReccord
        read.letter_annotations["phred_quality"] = self.qualgen.qual_score()

        return read

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
class FastqGeneratorPair(FastqGenerator):
    """
    @class FastqGeneratorPair
    @brief Generate a pair of SeqReccord objects containing quality strings from a given
    Reference source thanks to instances of SlicePickerPair and of Qualgenerator
    """
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

    #~~~~~~~PUBLIC METHODS~~~~~~~#

    def generate_fastq (self,source):
        """
        Ask a pair read to source with slicer and add quality strings generated with qualgen to
        both reads
        @param source Instance of ReferenceGenome or ReferenceJunctions
        @return A pair of SeqRecord objects including a quality string in the "letter_annotations"
        dictionnary
        """
        # Ask a seqReccord slice to a reference sequence source
        try:
            read1, read2 = self.slicer.pick_slice(source)
        except Exception as e:
            print e
            exit (0)

        # Add a phred quality string the seqReccord
        read1.letter_annotations["phred_quality"] = self.qualgen.qual_score()
        read2.letter_annotations["phred_quality"] = self.qualgen.qual_score()

        return read1, read2

